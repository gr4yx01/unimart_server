// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model University {
  id    String @id @default(cuid())
  users User[]
  name  String
}

enum Category {
  BOOK
  FOOD
  PHONE
  LAPTOP
  PERFUME
  CLOTHING
  ROOM_ITEMS
}

enum Status {
  PENDING
  DELIVERED
  CANCELLED
}

enum Subscription {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  department   String?
  university   University @relation(fields: [universityId], references: [id])
  gender       Gender     @default(MALE)
  level        String?
  universityId String
  phone_no     String?
  orders       Order[]
}

model Vendor {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  image           String
  verified        Boolean?
  phone_no        String?
  rating          Int?
  noOfRating      Int?        @default(0)
  totalRate       Int?        @default(0)
  subaccount_code String?
  account_number  String
  bank_code       String
  products        Product[]
  subscriptionStatus    Subscription @default(INACTIVE)
  subscriptionCode String? @unique
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  rating      Int
  noOfRating  Int?        @default(0)
  totalRate   Int?        @default(0)
  thumbnail   String
  stock       Int
  category    Category
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  vendorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[] // Relation with Order Items
}

model Order {
  id                String      @id @default(cuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String
  items             OrderItem[]
  status            Status
  total_price       Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  payment_status    Boolean?
  payment_reference String
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  amount Int
  quantity  Int
  confirmed_payment  Boolean  @default(false)
  out_for_delivery   Boolean  @default(false)
  delivered Boolean  @default(false)
}
